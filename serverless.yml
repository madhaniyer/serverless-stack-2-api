# NOTE: update this with your service name
service: notes-app-2-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

  #iamRoleStatements defines the permission policy for Lambda function
  #In this case Lambda functions are granted with permissions to access DynamoDB

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: 
        - "Fn::GetAtt": [ NotesTable, Arn ]
# Defines an HTTP API endpoint that calls the main function in create.js
# - path: url path is /notes
# - method: POST request
# - cors: enabled CORS for browser cross
# domain api call
# - authorizer: authenticate using the AWS IAM rol

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
    # Cognito
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}


#Stack Outputs
#AttachmentsBucketName: notes-app-2-api-dev-attachmentsbucket-pahv9uo85zue
#UserPoolClientId: arsiljqusr7f2trfqi27t65rk
#UserPoolId: us-east-2_9hBrhOwTI
#DeleteLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-2:331911543547:function:notes-app-2-api-dev-delete:1
#CreateLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-2:331911543547:function:notes-app-2-api-dev-create:1
#GetLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-2:331911543547:function:notes-app-2-api-dev-get:1
#UpdateLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-2:331911543547:function:notes-app-2-api-dev-update:1
#IdentityPoolId: us-east-2:78ebda4f-8195-48e5-9a8b-7f47494b78ac
#ListLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-2:331911543547:function:notes-app-2-api-dev-list:1
#ServiceEndpoint: https://p4ohw762b9.execute-api.us-east-2.amazonaws.com/dev
#ServerlessDeploymentBucketName: notes-app-2-api-dev-serverlessdeploymentbucket-9zkbtzbr7xrq

